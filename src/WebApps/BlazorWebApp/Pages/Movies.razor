@page "/"
@page "/movies"

@inject IHttpClientFactory ClientFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject MovieCatalogService MovieCatalogService
@inject ShoppingCartService ShoppingCartService

<PageTitle>Movie Catalog</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Movies</MudText>
<MudText Class="mb-12">Catalog of movies available for rent. Click on any movie to put it in the shopping cart.</MudText>

<MudGrid Spacing="5" Justify="Justify.Center">
    @if (movies == null)
    {
        <MudItem>
            @if (failedToFetchData)
            {
                <MudAlert Severity="Severity.Error">Unable to retrieve data from the Movie Cataloge API. Please try again later.</MudAlert>
            }
            else
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
        </MudItem>
    }
    else
    {
        foreach (var movie in movies)
        {
            <MudItem>
                <MudImage Src="@movie.PosterUrl" Alt="@movie.Title" Height="222" Width="150" Elevation="10" Class="rounded cursor-pointer" @onclick="() => OpenMovieDetailDialog(movie)" />
            </MudItem>
        }
    }
</MudGrid>

@code {
    private MovieDto[]? movies;
    private bool failedToFetchData;

    protected override async Task OnInitializedAsync()
    {   
        try
        {
            movies = await MovieCatalogService.GetMoviesAsync();
        }
        catch
        {
            failedToFetchData = true;
        }
    }

    private async Task OpenMovieDetailDialog(MovieDto movie)
    {
        Snackbar.Clear();

        var parameters = new DialogParameters { ["movie"] = movie };

        var options = new DialogOptions { NoHeader = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<MovieDetailDialog>("", parameters, options);

        DialogResult result = await dialog.Result;

        if (!result.Cancelled)
        {
            await TryPutMovieInShoppingCart(movie);
        }
    }

    private async Task TryPutMovieInShoppingCart(MovieDto movie)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.ClearAfterNavigation = true;

        switch (await ShoppingCartService.PutMovieInShoppingCart(movie))
        {
            case PutMovieInShoppingCartResult.Ok:
                Snackbar.Add($"{movie.Title} added to the shopping cart!", Severity.Success, config =>
                {
                    config.Icon = Icons.Material.Filled.ShoppingCartCheckout;
                    config.IconColor = Color.Dark;
                });
                break;
            case PutMovieInShoppingCartResult.AlreadyPresent:
                Snackbar.Add($"{movie.Title} is already in the shopping cart!", Severity.Error);
                break;
            case PutMovieInShoppingCartResult.Failed:
                Snackbar.Add($"Something went wrong. Try again later.", Severity.Error);
                break;
        }
    }
}